import java.io.*;
import java.util.*;

public class PosPileupEachNoneZeroLibOneLine {
    public static void main(String[] args) throws FileNotFoundException, IOException {
	if(args.length < 1) {
	    System.err.println("Please select the input list file");
	    return;
	} else if(args.length > 1) {
	    System.err.println("The number of arguments should be 1 and only 1");
	    return;
	}
    
	String inputPatientLibraryIDsFile = args[0];	
	Hashtable<String, ArrayList<String>> hashTable = new Hashtable<String, ArrayList<String>>();
	HashSet<String> allSampleIDs = new HashSet<String>(); // those samples which don't have any pos information (mutdriver file is empty, only has header) will also be included in the result file (all values are 0)
	Hashtable<String, String> otherInfoTable = new Hashtable<String, String>();
	Hashtable<String, HashSet<String>> howManyPatientsInEachKey = new Hashtable<String, HashSet<String>>(); 
	String otherInfoHeader = ""; // header for more information
	
	BufferedReader br = new BufferedReader(new FileReader(inputPatientLibraryIDsFile));
	String s;
	while((s = br.readLine()) != null) {
	    String[] array0 = s.split(" "); 
	    String patient = array0[0];
	    String normal = array0[1];
	    for(int i = 2; i< array0.length; i++) {
		String tumor = array0[i];
		allSampleIDs.add(patient+"_"+tumor);
		// reader of the final .mutdriver file generated by annovar annotation and VOGELSTEIN mut driver
		BufferedReader annotationFileReader = new BufferedReader(new FileReader("/mnt/pnsg10_projects/liuxl/ctso4_projects/liuxl/naharrr/strelka_annovar_no_Merged_deep_sequence/new/"+patient+"/"+normal+"_"+tumor+"/strelka_out/results/passed.somatic.indels.vcf_filtered.vcf_SNV_hg19_multianno.txt.mutdriver"));
		String line = annotationFileReader.readLine(); // feed the header line (remove)
		if(i == 2) // compose header at the first time 
		{
		    int[] range = new int[]{5,8};
		    otherInfoHeader = extractLine(line, range);
		}
		while((line = annotationFileReader.readLine()) != null ) {
		    line = line.trim();
		    String[] array = line.split("\t");

		    for(int iii = 0; iii< array.length; iii++) {
		        array[iii] = array[iii].trim();
		    }
 
		    String key = array[0]+"\t"+array[1]+"\t"+array[2]+"\t"+array[3]+"\t"+array[4];
		    if(hashTable.containsKey(key)) {
		        hashTable.get(key).add(patient+"_"+tumor);
		        howManyPatientsInEachKey.get(key).add(patient);
		    } else {
		        ArrayList<String> libraryIDs = new ArrayList<String>();
		        libraryIDs.add(patient+"_"+tumor);
		        hashTable.put(key,libraryIDs);
		        String otherInfo = "";
		        int[] range = new int[]{5,8};
		        otherInfo = extractLine(line, range);
		        otherInfoTable.put(key, otherInfo);
		        HashSet<String> patientSetForEachKey = new HashSet<String>();
		        patientSetForEachKey.add(patient);
		        howManyPatientsInEachKey.put(key, patientSetForEachKey); 	
		    }
		}
		annotationFileReader.close();
	    }
	}
	br.close();

	ArrayList<String> arrayList = new ArrayList<String>(allSampleIDs);
	Collections.sort(arrayList);
	
	String header = "Chr\tStart\tEnd\tRef\tAlt";
	//for(String a : arrayList) {
	//    header += "\t" + a;
	//}
	header += "\t" + "Number_Of_Patients" + "\t" + "Number_Of_Samples";
	header += "\t" + otherInfoHeader;
    header += "\t" + "Nonzero_lib";
	System.out.println(header);

	Iterator<Map.Entry<String, ArrayList<String>>> itr = hashTable.entrySet().iterator();
	while(itr.hasNext()) {
	    Map.Entry<String, ArrayList<String>> entry = (Map.Entry<String, ArrayList<String>>) itr.next();
	    String key = entry.getKey();
	    ArrayList<String> libraryIDs = entry.getValue();
	    String ss = key;
	    int numberOfSamples = 0;
	    for(String ee : arrayList) {
		if(libraryIDs.contains(ee)){
		    //ss += "\t" + "1";
		    numberOfSamples++;
		}
		//else
		//    ss += "\t" + "0";	
	    }
	    int numberOfPatients = howManyPatientsInEachKey.get(key).size();
	    ss += "\t" + numberOfPatients + "\t" + numberOfSamples;
	    ss += "\t" + otherInfoTable.get(entry.getKey());

        Collections.sort(libraryIDs);
        for(String libraryID : libraryIDs)
	        System.out.println(ss + "\t" + libraryID); 
	}
    }

    public static String extractLine(String originalLine, int[] rangeArray/*begin and end of each range, 0-based, both inclusive*/) {
	String[] splitArray = originalLine.split("\t");
	String newLine = "";
	for(int i = 0; i< rangeArray.length - 1; i+=2) {
	    int begin = rangeArray[i];
	    int end = rangeArray[i+1];
	    for(int j = begin; j<=end; j++) {
		newLine += splitArray[j] + "\t";
	    }
	}
	//newLine = newLine.trim(); // there may be many \t at the end, cannot use trim
    newLine = newLine.substring(0, newLine.length() - 1);//remove the last tab added in the previous loop
	return newLine;	
    }
}
